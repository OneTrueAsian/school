/* array.cpp defines "C style" array operations
 * Name:joey faas
 * Date:9/19/17
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#include "Array.h"
#include <iostream>
#include <fstream>
using namespace std;

void initialize(double *a, unsigned size) {
	int val = 0;
	for (unsigned i = 0; i < size; i++) {
		val = i + 1;
		a[i] = val;
	}
}

void print(double *a, unsigned size) {
	for (unsigned i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}

double average(double *a, unsigned size) {
	double sum = 0;
	double avg = 0;
	for (unsigned i = 0; i < size; i++) { //  loops through the array
		sum += *a; // the current location of a* + sum
		a++;
	}
	avg = sum / size; // get average from dividing the sum and the size
	return avg;
}

double sum(double *a, int size) {
	double sum = 0;
	for (int i = 0; i < size; i++) { //  loops through the array
		sum += *a; // the current location of a* + sum
		a++;
	}
	return sum;
}

void read(istream& in, double *a, int size) {
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert(fin.is_open());
	string firstLine, secondLine;
	getline(fin, firstLine);     // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10'
	read(fin, a4, 5);                // read 5 values instead of 6
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert(a4[i] == i + 11); //  values should be 11, 12, 13, 14, 15,
	}                                //   so test-values differ from fill()
	delete[] a4;
	cout << "Passed!" << endl;
}

void fill(const string& fileName, double *&a, int &numValues) {
	int size1 = numValues;
	double *temp1 = a;
	fill("arrayData.txt", a, size1);
	assert(a != temp1);
	assert(size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert(a[i] == i + 10);   // values should be 10, 11, 12, 13, 14, 15
	}
	cout << "Passed!  But double-check that you deleted the old array..."
			<< endl;
}

void resize(double *&a, int oldSize, int newSize) {
	cout << "Testing resize()... " << flush;
	double * temp1 = a;
	resize(a, oldSize, newSize);
	assert(a != temp1);
	for (int i = 0; i < 3; i++) {
		assert(a[i] == i + 1);
	}
	for (int i = 3; i < 7; i++) {
		assert(a[i] == 0);
	}

	double *temp3 = a;
	resize(a, oldSize, newSize);
	assert(temp3 != a);
	for (int i = 0; i < 3; i++) {
		assert(a[i] == i + 3);
	}
	cout << "Passed!  But double-check that you deleted the old array..."
			<< endl;
}

void concat(double *a1, int size1, double *a2, int size2, double *&a3,
		int &size3) {
	delete[] a3;
	a3 = new double[size1 + size2];

	for (int i = 0; i < size1 + size2; i++) {
		if (i < size1) {
			a3[i] = a1[i];
		} else {
			(a3[i] = a2[i - size1]);
		}
	}

}

